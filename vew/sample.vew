:title Introduction to Ruby

:description Introduction to Ruby
:author Jimmy Cheng
:email jimmyken793@gmail.com

:stylesheet_link_tag ./css/main.css, ./css/styles.css, ./css/jquery-ui.css
:stylesheet_link_tag ./css/zenburn.css

:javascript_include_tag js/jquery.min.js
:javascript_include_tag https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js
:javascript_include_tag js/reveal.js, js/highlight.js, js/ruler.js
:javascript_include_tag js/index.js

!SLIDE

# Introduction to Ruby
 ![assets/perfectruby.jpg]

!SLIDE
# What is Ruby?
  

!SLIDE
# Created by Yukihiro Matsumoto
```
I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language
```
!SLIDE
# An object-oriented scripting language
  
!SLIDE
# Philosophy

!SLIDE
# We are the masters. They are the slaves.

!SLIDE
# Naming Convention

!SLIDE
{:[type=ruby]}
```
ClassName
ModuleName

COSTANTS

method_name
variable_name

$global_variable

@instance_variable

@@static_variable
```

!SLIDE
# Everything is a Object

!SLIDE
```
ruby-1.9.2-p180 :001 > 1.class
 => Fixnum 
ruby-1.9.2-p180 :002 > "hello, string".class
 => String 
ruby-1.9.2-p180 :003 > /regexp/.class
 => Regexp
ruby-1.9.2-p180 :004 > String.class
 => Class 
```

!SLIDE
# String

!SLIDE
```
ruby-1.9.2-p180 :009 > str="ruby"
 => "ruby" 
ruby-1.9.2-p180 :010 > scentence="learn #{str}"
 => "learn ruby" 
ruby-1.9.2-p180 :011 > str="ruby"
 => "ruby" 
ruby-1.9.2-p180 :012 > scentence=%{learn "#{str}"}
 => "learn \"ruby\"" 
ruby-1.9.2-p180 :013 > scentence=%<learn "#{str}">
 => "learn \"ruby\"" 
ruby-1.9.2-p180 :014 > scentence.reverse
 => "\"ybur\" nrael" 
ruby-1.9.2-p180 :015 > scentence.length
 => 12
```

!SLIDE
# Block is a object, too.

!SLIDE
```
ruby-1.9.2-p180 :019 > kerker = lambda do |a,b,c|
ruby-1.9.2-p180 :020 >     puts a,b,c
ruby-1.9.2-p180 :021?> end
 => #<Proc:0x00000001fac598@(irb):19 (lambda)> 
```

!SLIDE
# Define a class

!SLIDE
```
class Girlfriend

end
```

!SLIDE
# Define attributes

!SLIDE
```
class Girlfriend
    attr_accessor :name, :age, :height, 
                  :weight, :gender
end
```

!SLIDE
# Get a new girlfriend

!SLIDE
```
new_happy = Girlfriend.new
new_happy.name = "***"
new_happy.age = 18
new_happy.height = 155
new_happy.weight = 41
new_happy.gender = :female
```

!SLIDE
# Seems stupid....

!SLIDE
# Add a constructor

!SLIDE
```
class Girlfriend
  def initialize(hash)
    @name = hash[:name]
    @age = hash[:age]
    @height = hash[:height]
    @weight = hash[:weight]
    @gender = hash[:gender]
  end
end
```


!SLIDE
```
new_happy = Girlfriend.new(
  {:name => "***",
   :age => 18, 
   :height => 155, 
   :weight => 41, 
   :gender => :female
  })
```
## or

```
new_happy = Girlfriend.new(
   :name => "***",
   :age => 18, 
   :height => 155, 
   :weight => 41, 
   :gender => :female
  )
```

!SLIDE
# Add methods

!SLIDE
```
class Girlfriend
  def decide_launch()
    return "no comment"
  end
  def self.static_method()
  end
end
```

!SLIDE
# Inheritance

!SLIDE
```
class Wife < Girlfriend
  attr_accessor :husband, :bank_account
  def initialize(hash)
    @husband = hash[:husband]
    @bank_account = hash[:bank_account]
    super
  end
  def rob_salary
    puts "#{@name}takes #{@husband}'s salary away!"
  end
end
```

!SLIDE
# Time to get married

!SLIDE
```
new_wife = Wife.new(
   :name => "***",
   :age => 18, 
   :height => 155, 
   :weight => 41, 
   :gender => :female,
   :husband => :me,
   :bank_account => 0
  )
```

!SLIDE
# Super power

```
super
super()
super(arg1, arg2)
```

!SLIDE
# Arguments
```
def my_method(arg1, arg2, arg3)
def my_method(arg1, arg2, arg3 = 0)
def my_method(arg1, arg2, *args)
def my_method(arg1, &block)
```

!SLIDE
# Block as an argument

!SLIDE
```
def my_method(arg1, &block)
   puts block
   yield
end
```
## or 
```
def my_method(&block)
   yield
end
```

!SLIDE
# Flow control

!SLIDE
# if
```
if a>b
  puts a
elsif b<a
  puts b
else
  puts "equal"
end
```
## or
```
puts "Game Over" if hp == 0 
puts "Game Over" unless hp > 0 
```

!SLIDE
# case
```
case input
  when 1, 2, 3
    puts "1~3"
  when 4, 5..10
    puts "4~10"
end
```
or
```
case input
  when "How are you?"
    puts "I'm fine, thank you. And you?"
  when /.*\./
    puts "Sorry, I can't understand you."
end
```

!SLIDE
# while
```
while a>b
  puts a
  a=a-1
end
```

!SLIDE
# for
```
for i in 0..9 do
  puts i
end
```
or
```
for e in ['a', 'b', 'c'] do
  puts e
end
```

!SLIDE
# Regexp
```
/Regexp/
```

